const io = require('socket.io-client');
const readline = require('readline');
const axios = require('axios');

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è URL —Ç–∞ –ø–æ—Ä—Ç—É
const API_URL = 'http://localhost:3000/api';
let token = '';
let currentUser = null;
let activeUsers = [];
let currentChat = null; // –ú–æ–∂–µ –±—É—Ç–∏ null (–∑–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Ç) –∞–±–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–ø—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç)

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∏—Ç–∞–Ω–Ω—è –∑ –∫–æ–Ω—Å–æ–ª—ñ
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
async function login() {
    try {
        rl.question('–í–≤–µ–¥—ñ—Ç—å email: ', async (email) => {
            rl.question('–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å: ', async (password) => {
                try {
                    const response = await axios.post(`${API_URL}/auth/login`, {
                        email,
                        password,
                    });

                    token = response.data.token;
                    currentUser = response.data.user;

                    console.log('\n‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!');
                    console.log(`üìù –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, ${currentUser.name}!\n`);

                    // –ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –ª–æ–≥—ñ–Ω—É –ø—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—å –¥–æ —Å–æ–∫–µ—Ç—É
                    connectSocket();
                } catch (error) {
                    console.error(
                        '\n‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:',
                        error.response?.data?.error || error.message,
                    );
                    login(); // –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
                }
            });
        });
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞:', error.message);
        process.exit(1);
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–æ–∫–µ—Ç—É
function connectSocket() {
    const socket = io('http://localhost:3000', {
        auth: {token},
    });

    // –û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ—ó –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    socket.on('connect', () => {
        console.log("üîå –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
        console.log('üí¨ –í–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç—É\n');
        showCommands();
    });

    // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    socket.on('connect_error', (error) => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:', error.message);
        process.exit(1);
    });

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    socket.on('active users', (users) => {
        activeUsers = users.filter((user) => user._id !== currentUser._id);
        if (activeUsers.length > 0) {
            console.log('\nüë• –ê–∫—Ç–∏–≤–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:');
            activeUsers.forEach((user, index) => {
                console.log(`  ${index + 1}. ${user.name} (ID: ${user._id})`);
            });
            console.log();
        }
    });

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç—É
    socket.on('chat history', (messages) => {
        if (messages.length > 0) {
            console.log('\nüìú –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç—É:');
            messages.forEach((msg) => {
                console.log(`  ${msg.sender.name}: ${msg.content}`);
            });
            console.log();
        } else {
            console.log('\nüìú –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç—É –ø–æ—Ä–æ–∂–Ω—è\n');
        }
    });

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ —ñ—Å—Ç–æ—Ä—ñ—ó
    socket.on('private history', ({userId, messages}) => {
        const user = activeUsers.find((u) => u._id === userId);
        if (messages.length > 0) {
            console.log(
                `\nüìú –Ü—Å—Ç–æ—Ä—ñ—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç—É –∑ ${user ? user.name : userId}:`,
            );
            messages.forEach((msg) => {
                const isFromMe = msg.sender._id === currentUser._id;
                console.log(
                    `  ${isFromMe ? '–í–∏' : msg.sender.name}: ${msg.content}`,
                );
            });
            console.log();
        } else {
            console.log(
                `\nüìú –Ü—Å—Ç–æ—Ä—ñ—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç—É –∑ ${
                    user ? user.name : userId
                } –ø–æ—Ä–æ–∂–Ω—è\n`,
            );
        }
    });

    // –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–∏—Ö –ø—É–±–ª—ñ—á–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    socket.on('message', (message) => {
        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –º–∏ –≤ –∑–∞–≥–∞–ª—å–Ω–æ–º—É —á–∞—Ç—ñ
        if (currentChat === null) {
            const isFromMe = message.sender._id === currentUser._id;
            console.log(
                `${isFromMe ? '–í–∏' : message.sender.name}: ${message.content}`,
            );
        }
    });

    // –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–∏—Ö –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    socket.on('private message', (message) => {
        const isFromMe = message.sender._id === currentUser._id;
        const otherUserId = isFromMe
            ? message.recipient._id
            : message.sender._id;

        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –º–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ
        // –∞–±–æ –Ω–µ –≤ –∂–æ–¥–Ω–æ–º—É —á–∞—Ç—ñ (—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è)
        if (currentChat === otherUserId) {
            console.log(
                `${isFromMe ? '–í–∏' : message.sender.name}: ${message.content}`,
            );
        } else if (currentChat !== otherUserId && !isFromMe) {
            console.log(
                `\nüîî –ù–æ–≤–µ –ø—Ä–∏–≤–∞—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ ${message.sender.name}: ${message.content}\n`,
            );
        }
    });

    // –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥'—î–¥–Ω–∞–Ω–Ω—è
    socket.on('disconnect', () => {
        console.log("\nüîå –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º —Ä–æ–∑—ñ—Ä–≤–∞–Ω–æ");
    });

    // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
    socket.on('error', (error) => {
        console.error('\n‚ùå –ü–æ–º–∏–ª–∫–∞:', error.message);
    });

    // –û–±—Ä–æ–±–∫–∞ –≤–≤–æ–¥—É –∑ –∫–æ–Ω—Å–æ–ª—ñ
    rl.on('line', (input) => {
        const trimmedInput = input.trim();

        // –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥
        if (trimmedInput.startsWith('/')) {
            const parts = trimmedInput.slice(1).split(' ');
            const command = parts[0].toLowerCase();

            switch (command) {
                case 'help':
                    showCommands();
                    break;

                case 'users':
                    // –ó–∞–ø–∏—Ç—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
                    socket.emit('get active users');
                    break;

                case 'private':
                case 'pm':
                    const userIndex = parseInt(parts[1]) - 1;
                    if (
                        isNaN(userIndex) ||
                        userIndex < 0 ||
                        userIndex >= activeUsers.length
                    ) {
                        console.log(
                            '\n‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /users –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–ø–∏—Å–∫—É.\n',
                        );
                        return;
                    }

                    currentChat = activeUsers[userIndex]._id;
                    console.log(
                        `\nüí¨ –í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –¥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç—É –∑ ${activeUsers[userIndex].name}\n`,
                    );

                    // –ó–∞–ø–∏—Ç—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                    socket.emit('get private history', currentChat);
                    break;

                case 'public':
                case 'general':
                    currentChat = null;
                    console.log('\nüí¨ –í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç—É\n');
                    break;

                case 'exit':
                case 'quit':
                    console.log('\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!');
                    socket.disconnect();
                    process.exit(0);
                    break;

                default:
                    console.log(
                        '\n‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥.\n',
                    );
            }

            return;
        }

        // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if (trimmedInput) {
            if (currentChat === null) {
                // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ –∑–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Ç
                socket.emit('message', {content: trimmedInput});
            } else {
                // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                socket.emit('private message', {
                    recipientId: currentChat,
                    content: trimmedInput,
                });
            }
        }
    });

    // –ü–æ–∫–∞–∑—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
    function showCommands() {
        console.log('\nüîç –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:');
        console.log('  /help - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥');
        console.log('  /users - –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤');
        console.log(
            '  /pm <–Ω–æ–º–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞> - –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç—É –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º',
        );
        console.log('  /public - –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç—É');
        console.log('  /exit - –≤–∏–π—Ç–∏ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏\n');
    }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é
console.log('üöÄ –ö–æ–Ω—Å–æ–ª—å–Ω–∏–π –∫–ª—ñ—î–Ω—Ç —á–∞—Ç—É');
console.log('üë§ –ë—É–¥—å –ª–∞—Å–∫–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å:');
login();
